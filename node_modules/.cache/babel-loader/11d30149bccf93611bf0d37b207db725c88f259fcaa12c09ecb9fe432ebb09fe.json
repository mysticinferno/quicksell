{"ast":null,"code":"export const groupTicketsByStatus = tickets => {\n  const groups = tickets.reduce((result, ticket) => {\n    if (!result[ticket.status]) {\n      result[ticket.status] = [];\n    }\n    result[ticket.status].push(ticket);\n    return result;\n  }, {\n    \"Backlog\": [],\n    \"Todo\": [],\n    \"In progress\": [],\n    \"Done\": [],\n    \"Canceled\": []\n  });\n  return groups;\n};\nexport const groupTicketsByPriority = tickets => {\n  const groups = tickets.reduce((result, ticket) => {\n    const priority = getPriotityLabel(ticket.priority);\n    if (!result[priority]) {\n      result[priority] = [];\n    }\n    result[priority].push(ticket);\n    return result;\n  }, {\n    \"No priority\": [],\n    \"Low\": [],\n    \"Medium\": [],\n    \"High\": [],\n    \"Urgent\": []\n  });\n  return groups;\n};\nexport const groupTicketsByUserId = tickets => {\n  const groups = tickets.reduce((result, ticket) => {\n    if (!result[ticket.userId]) {\n      result[ticket.userId] = [];\n    }\n    result[ticket.userId].push(ticket);\n    return result;\n  }, {});\n  return groups;\n};\nexport const mapUsersByUserId = users => {\n  let group = users.reduce((accumulator, user) => {\n    accumulator[user.id] = user;\n    return accumulator;\n  }, {});\n  return group;\n};\nconst getPriotityLabel = priority => {\n  switch (priority) {\n    case 0:\n      return \"No priority\";\n    case 1:\n      return \"Low\";\n    case 2:\n      return \"Medium\";\n    case 3:\n      return \"High\";\n    case 4:\n      return \"Urgent\";\n    default:\n      return \"NA\";\n  }\n};\nconst orderByPriority = tickets => tickets.sort((a, b) => a.priority > b.priority ? -1 : 1);\nconst orderByTitle = tickets => tickets.sort((a, b) => a.title < b.title ? -1 : 1);\nexport const loadGrid = (tickets, grouping, ordering) => {\n  let orderedTickets;\n  if (ordering === \"priority\") orderedTickets = orderByPriority(tickets);else orderedTickets = orderByTitle(tickets);\n  switch (grouping) {\n    case \"status\":\n      return groupTicketsByStatus(orderedTickets);\n    case \"priority\":\n      return groupTicketsByPriority(orderedTickets);\n    case \"user\":\n      return groupTicketsByUserId(orderedTickets);\n    default:\n      return groupTicketsByUserId(orderedTickets);\n  }\n};","map":{"version":3,"names":["groupTicketsByStatus","tickets","groups","reduce","result","ticket","status","push","groupTicketsByPriority","priority","getPriotityLabel","groupTicketsByUserId","userId","mapUsersByUserId","users","group","accumulator","user","id","orderByPriority","sort","a","b","orderByTitle","title","loadGrid","grouping","ordering","orderedTickets"],"sources":["/home/inferno/Downloads/QuickSell-Frontend-Assignment-main/src/utils/index.ts"],"sourcesContent":["import { Ticket, User } from \"../interfaces\";\n\nexport const groupTicketsByStatus = (tickets: Ticket[]) => {\n    const groups: Record<string, Ticket[]> = tickets.reduce((result: Record<string, Ticket[]>, ticket: Ticket) => {\n        if (!result[ticket.status]) {\n            result[ticket.status] = [];\n        }\n        result[ticket.status].push(ticket);\n        return result;\n    }, { \"Backlog\": [], \"Todo\": [], \"In progress\": [], \"Done\": [], \"Canceled\": [], });\n\n    return groups;\n};\n\nexport const groupTicketsByPriority = (tickets: Ticket[]) => {\n    const groups: Record<string, Ticket[]> = tickets.reduce((result: Record<string, Ticket[]>, ticket: Ticket) => {\n        const priority = getPriotityLabel(ticket.priority);\n        if (!result[priority]) {\n            result[priority] = [];\n        }\n        result[priority].push(ticket);\n        return result;\n    }, { \"No priority\": [], \"Low\": [], \"Medium\": [], \"High\": [], \"Urgent\": [] });\n\n    return groups;\n};\n\nexport const groupTicketsByUserId = (tickets: Ticket[]) => {\n    const groups: Record<string, Ticket[]> = tickets.reduce((result: Record<string, Ticket[]>, ticket: Ticket) => {\n        if (!result[ticket.userId]) {\n            result[ticket.userId] = [];\n        }\n        result[ticket.userId].push(ticket);\n        return result;\n    }, {});\n\n    return groups;\n};\n\nexport const mapUsersByUserId = (users: User[]) => {\n    let group: Record<string, User> = users.reduce((accumulator: Record<string, User>, user: User) => {\n        accumulator[user.id] = user;\n        return accumulator;\n    }, {});\n\n    return group;\n};\n\nconst getPriotityLabel = (priority: number) => {\n    switch (priority) {\n        case 0: return \"No priority\";\n        case 1: return \"Low\";\n        case 2: return \"Medium\";\n        case 3: return \"High\";\n        case 4: return \"Urgent\";\n        default: return \"NA\";\n    }\n}\n\nconst orderByPriority = (tickets: Ticket[]) => tickets.sort((a: Ticket, b: Ticket) => a.priority > b.priority ? -1 : 1);\nconst orderByTitle = (tickets: Ticket[]) => tickets.sort((a: Ticket, b: Ticket) => a.title < b.title ? -1 : 1);\n\nexport const loadGrid = (tickets: Ticket[], grouping: string, ordering: string) => {\n    let orderedTickets;\n    if (ordering === \"priority\")\n        orderedTickets = orderByPriority(tickets);\n    else\n        orderedTickets = orderByTitle(tickets);\n\n    switch (grouping) {\n        case \"status\": return groupTicketsByStatus(orderedTickets);\n        case \"priority\": return groupTicketsByPriority(orderedTickets);\n        case \"user\": return groupTicketsByUserId(orderedTickets);\n        default: return groupTicketsByUserId(orderedTickets);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}